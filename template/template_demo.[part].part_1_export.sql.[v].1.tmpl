1
-- The defaut value of indent_base is tag
{$ indent_base = tag $}

-- The kind of Symbol has: {#{%..%} {$..$} {{..}} {#..#}#}, and it only a Raw Token demo

/*
Create by {% for author in authors %}{$ join_with = , $}{{author}}{% endfor %}
Create in {{$now}}
*/

-- Table {{table.name}}
CREATE TABLE {{table.name}} (
    {% if 1 == 1 %}
      {$ indent_base = raw $}
-- This is indent_base=raw demo 1: no indent
    -- This is indent_base=raw demo 2: 4 space indent
    {% endif %}
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    -- Default indent_base is 'inherit', here is 'tag' because of global env define is 'tag'
    {% for field in custom_fields %}
      {$ join_with = \n $}-- After 'env' Token
      -- $index is {{$index}}, $max is {{$max}}
      {{field.name}} {{field.type}}, -- {{field.comment}}
      {% if   $index ==      $max %}-- [TestCase] first item in tag, should be fill the indent
        -- ending text demo: last index is {{$index}}, max is {{$max}}
          -- This is test case for nested indentation
      {% endif %}
    {% endfor %}-- Text after Tag 'for', use to test token context attribute 'end_of_row'
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Table {{table.name}} comment
COMMENT ON TABLE {{table.name}} IS '{{table.comment}}';
COMMENT ON COLUMN {{table.name}}.id IS 'Identifier';
COMMENT ON COLUMN {{table.name}}.first_name IS 'First name';
COMMENT ON COLUMN {{table.name}}.last_name IS 'Last name';
-- Define custom indent_base as 'raw', indent based on the literal indentation
{% for field in custom_fields %}
  {$ indent_base = raw $}
  {$ join_with = \n $}
  COMMENT ON COLUMN {{table.name}}.{{field.name}} IS '{{field.comment}}';
{% endfor %}
COMMENT ON COLUMN {{table.name}}.created_at IS 'Created at';
COMMENT ON COLUMN {{table.name}}.updated_at IS 'Updated at';

-- Case Tag::If
{% if "abc" == "abc" %}
  -- Pass. "abc" == "abc" is true
{% endif %}

-- Single line join
{% for field in single_line_join_fields %}{$ join_with = , $}{{field}}{% endfor %}
